C-----------------------------------------------------------------------
C  nek5000 user-file template
C
C  user specified routines:
C     - userbc : boundary conditions
C     - useric : initial conditions
C     - uservp : variable properties
C     - userf  : local acceleration term for fluid
C     - userq  : local source term for scalars
C     - userchk: general purpose routine for checking errors etc. 
C
C-----------------------------------------------------------------------

      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end

c-----------------------------------------------------------------------

      subroutine userf(ix,iy,iz,ieg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      implicit none     

cc MA:      include 'SIZE_DEF'
      include 'SIZE'
cc MA:      include 'NEKUSE_DEF'
      include 'NEKUSE'
cc MA:      include 'PARALLEL_DEF'
      include 'PARALLEL'
      include 'TRIPF'
      include 'RTFILTER'
cc MA:      include 'INPUT_DEF'
      include 'INPUT'              ! if3d

      integer ix,iy,iz,ieg

      integer iel,iii

      real*8 lmbda,s1start,s1end,s1rise,s1max,xi1,xi2
      real*8 s1fall,pi,elipse_up,alpha_rot

      real*8 usponge(lx1,ly1,lz1,lelv),
     &     vsponge(lx1,ly1,lz1,lelv), wsponge(lx1,ly1,lz1,lelv)

      real*8 uss(lx1,ly1,lz1,lelv),
     &     vss(lx1,ly1,lz1,lelv), wss(lx1,ly1,lz1,lelv)


      COMMON / SPONGE /  usponge, vsponge, wsponge, uss,vss,wss
      real*8 fzt_u,fzt_d

      real step          ! function

c---------------------------------------- 
 
      iel = gllel(ieg)   
      iii = (ieg-1)/(nnelx1x2(1))
      fzt_u = fzt1(iz+iii*lz1,1)
      fzt_d = fzt1(iz+iii*lz1,2)

!    RT filter

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

!    Tripping and sponge
      pi    = 4.*atan(1.)
      alpha_rot = alpha_elipse*pi/180.0

      if (x.ge.6.) then                 ! Sponge
         
         s1start = 4.;
         s1end   = 10.0;
         s1rise  = 0.6;
         s1fall  = 0.5;
         s1max   = 1.;
         
         xi1 = (x-s1start)/s1rise;
         xi2 = (x-s1end)/s1fall + 1;
         
         lmbda =  s1max*(step(xi1)-step(xi2))

!         ffx = lmbda*(usponge(ix,iy,iz,iel)-vx(ix,iy,iz,iel))
!         ffy = lmbda*(vsponge(ix,iy,iz,iel)-vy(ix,iy,iz,iel))
         ffx = lmbda*(usponge(ix,iy,iz,iel)-ux)
         ffy = lmbda*(vsponge(ix,iy,iz,iel)-uy)
         if (if3d) ffz = lmbda*(0. - uz) 

      else                              ! Tripping

c         elipse_up = -(((x-xup)*cos(alpha_rot) + (y-yup)*sin(alpha_rot))
c     $        /radiusx)**2 - (((x-xup)*sin(alpha_rot) -  (y-yup)
c     $        *cos(alpha_rot)) /radiusy)**2 

c         ffx = 0.0
c         ffy = exp(elipse_up)*fzt_u+ exp(-((x-xlo)/(2.0*radiusx))**2.0
c     $        -((y-ylo)/(2.0*radiusy))**2.0)*fzt_d
c         ffz = 0.0

         ffx = 0.0

         ffy=exp(-((x-xup)/(radiusx))**2.0
     $        -((y-yup)/(radiusy))**2.0)*fzt_u
     $        +exp(-((x-xlo)/(radiusx))**2.0
     $        -((y-ylo)/(radiusy))**2.0)*fzt_d

         ffz=0.0

c         uss(ix,iy,iz,iel) = ffy

!         wsponge(ix,iy,iz,iel) = ffy    
      end if

c      ffx = ffx + rtfx(ix,iy,iz,iel)
c      ffy = ffx + rtfy(ix,iy,iz,iel)
c      ffz = ffz + rtfz(ix,iy,iz,iel)


c      vss(ix,iy,iz,iel)=rtfy(ix,iy,iz,iel)

      if((ffy .LE. -1.0e-10) .OR. (ffy .GE. 1.0e-10)) then
         ffy=ffy
      else
         ffy=rtfy(ix,iy,iz,iel)
      endif

      ffx=rtfx(ix,iy,iz,iel)
      ffz=rtfz(ix,iy,iz,iel)

c      wss(ix,iy,iz,iel)=ffy

      return
      end

c-----------------------------------------------------------------------

      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0
      source = 0.0

      return
      end

c-----------------------------------------------------------------------

      subroutine userbc(ix,iy,iz,iside,ieg) 
c     set up user-defined boundary conditions

      implicit none

cc MA:      include 'SIZE_DEF'
      include 'SIZE'
cc MA:      include 'NEKUSE_DEF'
      include 'NEKUSE'
cc MA:      include 'PARALLEL_DEF'
      include 'PARALLEL'
cc MA:      include 'INPUT_DEF'
      include 'INPUT'

      integer ix,iy,iz,iside,ieg
    
      real*8 usponge(lx1,ly1,lz1,lelv),
     &     vsponge(lx1,ly1,lz1,lelv),wsponge(lx1,ly1,lz1,lelv)
      COMMON / SPONGE /  usponge, vsponge,wsponge
    
      integer iel
      real U0delta,S0 ! Dong parameters

c     Dong boundary condition
      pa =0
      U0delta = 1.
      
      iel = gllel(ieg)   

      ux   = usponge(ix,iy,iz,iel) !bocoarray(index,1) 
      uy   = vsponge(ix,iy,iz,iel) !bocoarray(index,2)
      uz   = wsponge(ix,iy,iz,iel)

      if (cbu.eq.'o  ') then

c     The current definition assumes that the normal velocity
c     is ux, i.e. the boundary is orthogonal to x, and the outflow
c     direction is in postive x.
         S0  = 0.5*(1-tanh(ux/U0delta))

         if (IF3D) then
            pa = -0.5*(ux*ux+uy*uy+uz*uz)*S0
         else
            pa = -0.5*(ux*ux+uy*uy)*S0
         endif
         
      endif
            
      return
      end

c-----------------------------------------------------------------------

      subroutine useric(ix,iy,iz,ieg) ! set up initial conditions

      implicit none

cc MA:      include 'SIZE_DEF'
      include 'SIZE'
cc MA:      include 'NEKUSE_DEF'
      include 'NEKUSE'
cc MA:      include 'PARALLEL_DEF'
      include 'PARALLEL'

      integer ix,iy,iz,ieg

      real*8 usponge(lx1,ly1,lz1,lelv),
     &     vsponge(lx1,ly1,lz1,lelv),wsponge(lx1,ly1,lz1,lelv)
      COMMON / SPONGE /  usponge, vsponge,wsponge
    
      integer iel
      
      iel = gllel(ieg)   

      ux   = usponge(ix,iy,iz,iel) !bocoarray(index,1) 
      uy   = vsponge(ix,iy,iz,iel) !bocoarray(index,2)
      uz   = wsponge(ix,iy,iz,iel)

!      ux   = 1.0
!      uy   = 0.0
!      uz   = 0.0
!      temp = 1.0

      return
      end

c-----------------------------------------------------------------------

      subroutine userchk()

      implicit none

cc MA:      include 'SIZE_DEF'      
      include 'SIZE'
cc MA:      include 'GEOM_DEF'
      include 'GEOM'                    ! xm1, ym1, zm1
cc MA:      include 'SOLN_DEF'
      include 'SOLN'                    ! T
cc MA:      include 'MASS_DEF'
      include 'MASS'                    !BM1 for lambda2
cc MA:      include 'TSTEP_DEF'
      include 'TSTEP'                   ! ISTEP
cc MA:      include 'INPUT_DEF'
      include 'INPUT'                   ! PARAM(12) (DT)
      include 'USERPAR'                 ! l2freq, FIXGEOM, NEW_DT
!      include 'RTFILTER'                ! Diagnostic spectra only. Can be removed later.

      integer lt
      parameter (lt=lx1*ly1*lz1*lelv)
   
      real*8  usponge(lx1,ly1,lz1,lelv),
     $     vsponge(lx1,ly1,lz1,lelv),wsponge(lx1,ly1,lz1,lelv)

      real*8  uss(lx1,ly1,lz1,lelv),
     $     vss(lx1,ly1,lz1,lelv),wss(lx1,ly1,lz1,lelv)

      real*8 work1(1),work2(1)
      
      COMMON / SPONGE / usponge, vsponge,wsponge,uss,vss,wss

      logical exist_rst

!      real vort, w1, w2                      ! Diagnostic spectra
!      COMMON /scrns/ vort(lt,3), w1(lt), w2(lt)
!-------------------------------------------------- 

!    Initialize spectral coeffs.
!    Only for diagnosis. Should be removed later.
!-------------------------------------------------- 
!      if (ISTEP.eq.0) call err_est_init

cc MA:
      call uprm_read_MA               ! New user parameter read function

!    Read initial/BC
!-------------------------------------------------- 
      if (istep .eq. 0) then   
!         call opcopy(u1tmp,v1tmp,w1tmp,xm1,ym1,zm1)         ! Backup xyz coordinates
!     check for IC to set up the fringe
         inquire(file='naca_wing.IC',exist=exist_rst)
         if (exist_rst) then
            if(nid.eq.0)then
               write(*,*) '------------------------------------'
               write(*,*) 'READ  IC  as the Fringe input'
               write(*,*) '------------------------------------'
            end if
            initc(1) = 'naca_wing.IC'
            call setics
            call opcopy(usponge,vsponge,wsponge,vx,vy,vz)
         end if

      end if
!-------------------------------------------------- 
      
      call checkpoint                   ! Restart check

      if (istep .eq. 0) then
         call opcopy(usponge,vsponge,wsponge,vx,vy,vz)
      end if

      call make_RTF                     ! filter forcing

! Calculate and output Lambda2
!-------------------------------------------------- 
      IFTO = .TRUE.
      if (mod(ISTEP,L2FREQ).eq.0) then
         if (NID.eq.0) write(6,*) ISTEP,IOSTEP,TIME,' compute lambda2'
         call lambda2(T(1,1,1,1,1))
         call col2  (T(1,1,1,1,1),bm1,lt)
         call dssum (T(1,1,1,1,1),nx1,ny1,nz1)
         call col2  (T(1,1,1,1,1),binvm1,lt)

!    Diagnostic Spectra for filtering. Can be removed later.
!    Outpost with la2
!         if (rt_wght.ne.0) then
!            call get_spectra(vort(1,1),rtfx)
!            call get_spectra(vort(1,2),rtfy)
!            call get_spectra(vort(1,3),rtfz)
!            call outpost(vort(1,1),vort(1,2),vort(1,3),pr,t,'la2')
!         else
            call outpost(vx,vy,vz,pr,t,'la2')
c            call outpost(vx,vy,vz,pr,uss,'tr1')
c            call outpost(vx,vy,vz,pr,vss,'tr2')
c            call outpost(vx,vy,vz,pr,wss,'tr3')

!         endif
!--------------------------------------------------

      endif
 

!!    Fix wing surface GLL points. Moved to usrdat2
!!-------------------------------------------------- 
!      if ((FIXGEOM.eq.1).and.(ISTEP.eq.0)) then
!         call opcopy(xm1,ym1,zm1,u1tmp,v1tmp,w1tmp)         ! copy old x,y,z back.
!         call fix_mygll()                                   ! fix them
!      endif

!!   Change Time step
!-------------------------------------------------- 
      if ((ISTEP.eq.5).and.(NEW_DT.ne.0.0)) then
        PARAM(12) = NEW_DT 
      endif

      call readtrip_par                 ! read forparam.i file. Very inelegant
                                        ! Should be called from within tripf anyway

      call tripf                        ! Tripping      

      call stat_avg_all                 ! new one
!      call avg_stat_all

 
      return
      end
      
c-----------------------------------------------------------------------
      
      subroutine usrdat()
c     Read user-defined boundary conditions into a common array bocoarray
c     Read input data for fringe region

      include 'SIZE'

c     variables used for user-defined boundary conditions

      real dum(3)

!      call user_param
cc MA:      call uprm_read               ! New user parameter read function

      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat2()  
c     Set the GLL points as defined in the CASENAME.grid file

      implicit none

cc MA:      include 'SIZE_DEF'      
      include 'SIZE'
      include 'USERPAR'
cc MA:      include 'SOLN_DEF'
      include 'SOLN'
cc MA:
      include 'INPUT'  !! cc MA: PARAM(71) FIXGEOM
      
!    Fix wing surface GLL points.
!-------------------------------------------------- 
cc MA: load here:
      FIXGEOM = INT(PARAM(71))
      if (FIXGEOM.eq.1) then
!         call opcopy(xm1,ym1,zm1,u1tmp,v1tmp,w1tmp)         ! copy old x,y,z back.
         call fix_mygll()                                   ! fix them
      endif
      call fix_geom
!      call outpost(vx,vy,vz,pr,t,'gri')
      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat3()

      implicit none

cc MA:      include 'SIZE_DEF'
      include 'SIZE'
      include 'TRIPF'
      real bb
      real ran2          ! function

      integer i    

      if (nid.eq.0) write(*,*) 'INITIALIZATION OF TRIP FORCING'

c     initialize ran2
c     
      seed = -32
      bb=ran2(seed)

      call readwallfile
      do i=1,nwalls
            call znekgen(i)
      enddo

!     Call this to multiply num_modes depending on the aspect ratio
!     (x-y)
c      call ARnumnodes

      return
      end
c---------------------------------------------------------------------- 
c
c automatically added by makenek
      subroutine usrsetvert(glo_num,nel,nx,ny,nz) ! to modify glo_num
      integer*8 glo_num(1)
      return
      end

C=======================================================================

